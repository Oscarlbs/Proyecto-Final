DROP DATABASE IF EXISTS CAFETERIA;

CREATE DATABASE CAFETERIA;

USE CAFETERIA;

CREATE TABLE ARTICULO (

CODIGO_ARTICULO INT AUTO_INCREMENT PRIMARY KEY,
STOCK INT NULL,
PRECIO DOUBLE NOT NULL

);

INSERT INTO ARTICULO (CODIGO_ARTICULO, STOCK, PRECIO) VALUES

( '1' , '65' , '5.50' ),
( '2' , '52' , '5' ),
( '3' , '41' , '6.50' ),
( '4' , '59' , '3.20' ),
( '5' , '15' , '7.5' ),
( '6' , '12'  , '2.5' ),
( '7' , '24' , '2' ),
( '8' , '62'  , '3' ),
( '9' , '45' , '4.5' ),
( '10', '85' , '2' ),
( '11', '45' , '1.5' ),
( '12', '62' , '3.5' ),
( '13', '41' , '4.5' ),
( '14', '51' , '3.0' ),
( '15', '26' , '2.25' ),
( '16', '54' , '2.10' ),
( '17', '54' , '1.65' ),
( '18', '69' , '1.35' ),
( '19', '45' , '1.25' ),
( '20', '8' , '3.00'),
( '21', '13' , '7.5' ),
( '22', '26' , '2.25' ),
( '23', '27' , '1.50' ),
( '24', '19' , '1.75' ),
( '25', '36' , '4.00' ),
( '26', '14' , '1.00' ),
( '27', '16' , '2.25' ),
( '28', '25' , '2.50' ),
( '29', '58' , '3.75' ),
( '30 ', '31' , '2.50' );

CREATE TABLE TICKET (
CODIGO_TICKET INT PRIMARY KEY AUTO_INCREMENT,
FECHA_HORA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO TICKET (FECHA_HORA)VALUES
('2022-05-20 12:00:00'),('2022-05-21 13:00:00'),('2022-04-18 17:30:00'),
('2022-05-01 19:00:00'),('2022-05-26 08:30:00'),('2022-04-30 09:45:30');


CREATE TABLE BEBIDAS (

ARTICULOS_BEBIDAS INT,
TIPOS_BEBIDAS ENUM('AGUA','COCA_COLA', 'AQUARIUS','NESTEA','BATIDOS', 'CERVEZA', 'VINO','FANTA','SPRITE','GASEOSAS') NULL,
	
FOREIGN KEY (ARTICULOS_BEBIDAS) REFERENCES ARTICULO(CODIGO_ARTICULO)	
	ON DELETE CASCADE 
	ON UPDATE CASCADE
	
);

INSERT INTO BEBIDAS (ARTICULOS_BEBIDAS,TIPOS_BEBIDAS) VALUES

( '1'  , 'AGUA'),
( '2'  , 'COCA_COLA'),
( '3'  , 'AQUARIUS'),
( '4'  , 'NESTEA'),
( '5'  , 'BATIDOS'),
( '6'  , 'CERVEZA'),
( '7'  , 'VINO'),
( '8'  , 'FANTA'),
( '9'  , 'SPRITE'),
( '10' , 'GASEOSAS');


CREATE TABLE PINCHOS (

ARTICULO_PINCHO INT PRIMARY KEY,
TIPO_PINCHO ENUM('TORTILLA','CHORIZO','TERNERA','PULPO','QUESO','HUEVO','CERDO','SALMON','JAMON','LOMO'),
TIPOS ENUM('PINCHO', 'TAPA', 'RACION'),
ALERGENOS ENUM('LACTEOS','CARNICOS','PESCADO','MARISCO', 'ACEITES','HUEVO','HARINA','NUECES','ALMENDRAS','GLUTEN'),
FOREIGN KEY (ARTICULO_PINCHO) REFERENCES ARTICULO(CODIGO_ARTICULO)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

INSERT INTO PINCHOS (ARTICULO_PINCHO,TIPOS,TIPO_PINCHO,ALERGENOS) VALUES

( '11','PINCHO','TORTILLA','HUEVO'),
( '12','PINCHO','CHORIZO','CARNICOS'),
( '13','PINCHO','TERNERA','CARNICOS'),
( '14','PINCHO','PULPO','MARISCO'),
( '15','TAPA','QUESO','LACTEOS'),
( '16','TAPA','HUEVO','HUEVO'),
( '17','RACION','CERDO','CARNICOS'),
( '18','TAPA','SALMON','PESCADO'),
( '19','TAPA','JAMON','CARNICOS'),
( '20','TAPA','LOMO','CARNICOS');

CREATE TABLE ALERGENOS (

ARTICULO_ALERGENOS INT PRIMARY KEY,
NUMERO_ALERGENOS ENUM('LACTEOS','CARNICOS','PESCADO','MARISCO', 'ACEITES','HUEVO','HARINA','NUECES','ALMENDRAS','GLUTEN' ),

FOREIGN KEY (ARTICULO_ALERGENOS) REFERENCES ARTICULO(CODIGO_ARTICULO)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

INSERT INTO ALERGENOS (ARTICULO_ALERGENOS,NUMERO_ALERGENOS) VALUES 

( '21'  , 'LACTEOS'	),
( '22'  , 'CARNICOS'),
( '23'  , 'PESCADO'),
( '24'  , 'MARISCO'),
( '25'  , 'ACEITES'	),
( '26'  , 'HUEVO'),
( '27'  , 'HARINA'),
( '28'  , 'NUECES'	),
( '29'  , 'ALMENDRAS'),
( '30'  , 'GLUTEN');

#TABLA TICKET ARTICULO

CREATE TABLE TICKET_ARTICULO (

ARTICULO INT,
TICKET INT,
ARTICULOS_VENDIDOS INT NOT NULL,

PRIMARY KEY (ARTICULO,TICKET),

FOREIGN KEY (ARTICULO) REFERENCES ARTICULO(CODIGO_ARTICULO)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	
FOREIGN KEY (TICKET) REFERENCES TICKET(CODIGO_TICKET)
	ON DELETE CASCADE
	ON UPDATE CASCADE
    
	
);


/*CORREGIR DA ERROR*/

/*INSERT INTO TICKET_ARTICULO (ARTICULO,TICKET,ARTICULOS_VENDIDOS)VALUES
#(1,14,1),(1,11,1),(2,14,1),(2,15,1),
#(3,9,2),(4,13,20),(5,18,2),(5,3,5),(6,10,1),(6,14,6);*/

# TRIGGERS 1 Y 2

# 1. EVITA VENTAS SI NO HAY STOCK.
# 2. REDUCE EL STOCK DISPONIBLE CON CADA NUEVO TICKET QUE SE Aï¿½ADA.

DELIMITER $$

DROP TRIGGER IF EXISTS EVITAR_REDUCIR_VENTAS $$
CREATE TRIGGER EVITAR_REDUCIR_VENTAS
AFTER INSERT ON TICKET_ARTICULO FOR EACH ROW

BEGIN 

	DECLARE AUX_STOCK INT;
	DECLARE RESULTADO INT;

	SELECT ARTICULO.STOCK INTO AUX_STOCK
	FROM TICKET_ARTICULO TA
	INNER JOIN ARTICULO A ON TA.ART = ARTICULO.CODIGO_ARTICULO
	WHERE TA.ART = NEW.ART;
	
	IF (NEW.ARTICULO_VENDIDO > AUX_STOCK)
	
	THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "ERROR, NO DISPONEMOS DE TANTO STOCK";
	
		SIGNAL SQLSTATE '99999' SET MESSAGE_TEXT ="ERROR, NO HAY TANTO STOCK DISPONIBLE";
	ELSE 
	
		SET RESULTADO = AUX_STOCK - NEW.ARTICULO_VENDIDO;
	
		UPDATE ARTICULO A SET ARTICULO.STOCK = RESULTADO WHERE ARTICULO.CODIGO_ARTICULO = NEW.ARTICULO;
	END IF;

		UPDATE ARTICULO A SET ARTICULO.STOCK = RESULTADO WHERE ARTICULO.CODIGO_ARTICULO = NEW.ARTICULO;
		END IF;
        
	END;
    
    
    DELIMITER;
        
        
	#******************************************************
#PRUEBA DEL TRIGGER SI NO HAY STOCK DISPONIBLE

/*

INSERT INTO ARTICULO (CODIGO_ARTICULO,STOCK,PRECIO) VALUES
('22' , '4' , '5.0');

INSERT INTO TICKET (CODIGO_TICKET,FECHA_HORA) VALUES
('22' , '2022-11-08 11:12:10:06' );

INSERT INTO TICKET_ARTICULO (ART,TICK,ART_VEND) VALUES
('22' , '2' , '10'); 

*/

#******************************************************
# TRIGGER QUE ACTUALIZA EL STOCK

/*

INSERT INTO ARTICULO (COD_ART,STOCK,PRECIO) VALUES
('22' , '9' , '5.0');

INSERT INTO TICKET (COD_TICK,FECHA_HORA) VALUES
('22' , '2022-11-08 11:11:21.00' );

INSERT INTO TICKET_ARTICULO (ARTICULO,TICK,ART_VEND) VALUES
('22' , '31' , '5'); 

SELECT *
	FROM TICKET_ARTICULO TA 
	INNER JOIN ARTICULO A ON TA.ART = A.COD_ART 
	WHERE TA.ART = 31 ;

*/
        
        
# 3. TRIGGER, AUMENTA EL STOCK CON CADA TICKET QUE SE BORRE.

DELIMITER $$


DROP TRIGGER IF EXISTS DEVOLUCION $$
CREATE TRIGGER DEVOLUCION
BEFORE DELETE ON TICKET_ARTICULO FOR EACH ROW 

BEGIN 
	
	DECLARE AUX_STOCK INT;
    DECLARE RESULTADO INT;
	
	SELECT ARTICULO.STOCK INTO AUX_STOCK
	FROM TICKET_ARTICULO TA
	INNER JOIN ARTICULO A ON TA.ART = ARTICULO.CODIGO_ARTICULO
	WHERE TA.ART = OLD.ARTICULO;

	SET RESULTADO = AUX_STOCK + OLD.ARTICULOS_VENDIDOS;
	UPDATE ARTICULO A SET ARTICULO.STOCK = RESULTADO WHERE ARTICULO.CODIGO_ARTICULO = OLD.ARTICULO;
    
	
END;


DELIMITER 

#PRUEBAS TRIGGER AUMENTAR STOCK CON CADA TICKET BORRADO

/*

INSERT INTO ARTICULO (CODIGO_ARTICULO,STOCK,PRECIO) VALUES
('31' , '11' , '5.0');

INSERT INTO TICKET (CODIGO_TICKET,FECHA_HORA) VALUES
('31' , '2022-11-08 11:11:21.00' );

INSERT INTO TICKET_ARTICULO (ARTICULO,TICKET,ARTICULO_VENDIDOS) VALUES
('31' , '31' , '5'); 

SELECT *
	FROM TICKET_ARTICULO TA 
	INNER JOIN ARTICULO A ON TA.ART = ARTICULO.CODIGO_ARTICULO
	WHERE TA.ART = 31 ;

DELETE 
	FROM TICKET_ARTICULO TA 
	WHERE TA.ART = 31 ; 

SELECT *
	FROM ARTICULO A 
	WHERE A.COD_ART = 31;

*/

# 4. TRIGGER AUMENTA O REDUCE EL STOCK DISPONIBLE ANTE CAMBIOS EN LOS TICKET.

/*DELIMITER //


DROP TRIGGER IF EXISTS UPDATE_STOCK //
CREATE TRIGGER UPDATE_STOCK
AFTER UPDATE ON TICKET_ARTICULO FOR EACH ROW 

BEGIN
	
	
	DECLARE AUX_STOCK INT;
	DECLARE RESULTADO INT;
	SET RESULTADO = AUX_STOCK - NEW.ARTICULO;

	SELECT ARTICULO.STOCK INTO AUX_STOCK
	FROM TICKET_ARTICULO TA
	INNER JOIN ARTICULO A ON ARTICULO.CODIGO_ARTICULO = TA.ARTICULO
	WHERE ARTICULO.CODIGO_ARTICULO = NEW.ARTICULO;
	
	UPDATE ARTICULO SET ARTICULO.STOCK = AUX_STOCK + NEW.ARTICULO
	
	
END;
//


DELIMITER;

*/


# 5. VISION DE LOS ARTICULOS DISPONIBLES PARA EL DEPENDIENTE.


DROP VIEW IF EXISTS ARTICULOS_DISPONIBLES;
CREATE VIEW ARTICULOS_DISPONIBLES AS
SELECT *
FROM ARTICULO A
LEFT JOIN BEBIDAS B ON B.ARTICULOS_BEBIDAS = A.CODIGO_ARTICULO 
LEFT JOIN PINCHOS P ON P.ARTICULO_PINCHO  = A.CODIGO_ARTICULO
LEFT JOIN ALERGENOS AL ON AL.ARTICULO_ALERGENOS = A.CODIGO_ARTICULO

WHERE A.STOCK > 0;


# 6. VISTA DEL ADMINISTRADOR CON LOS DATOS ORDENADOS DEL MAS RECIENTE AL MAS ANTIGUO.


DROP VIEW IF EXISTS RESUM_TICKETS;
CREATE VIEW RESUM_TICKETS AS
SELECT*
FROM TICKET T 
ORDER BY T.FECHA_HORA ASC;


# 7. VISTA DEL ADMINISTRADOR CON LOS DATOS DE LOS 5 ARTICULOS MAS VENDIDOS.


DROP VIEW IF EXISTS RESUM_ART ;
CREATE VIEW RESUM_ART AS 
SELECT A.CODIGO_ARTICULO, P.*, B.*, AL.*, SUM(TA.ARTICULOS_VENDIDOS) AS SUMA_PRECIOS
FROM ARTICULO A
LEFT JOIN PINCHOS P ON P.ARTICULO_PINCHO  = A.CODIGO_ARTICULO
LEFT JOIN BEBIDAS B ON B.ARTICULOS_BEBIDAS  = A.CODIGO_ARTICULO
LEFT JOIN ALERGENOS AL ON AL.ARTICULO_ALERGENOS = A.CODIGO_ARTICULO
INNER JOIN TICKET_ARTICULO TA ON TA.ARTICULO = A.CODIGO_ARTICULO
GROUP BY A.CODIGO_ARTICULO ORDER BY SUMA_PRECIOS DESC LIMIT 5;

# ROLES


DROP ROLE IF EXISTS ADMINISTRADOR;
DROP ROLE IF EXISTS DEPENDIENTE;

CREATE ROLE ADMINISTRADOR;
CREATE ROLE DEPENDIENTE;

GRANT ALL PRIVILEGES ON RESUM_TICKETS TO ADMINISTRADOR;
GRANT ALL PRIVILEGES ON RESUM_ARTICULOS TO ADMINISTRADOR;
GRANT ALL PRIVILEGES ON ARTICULOS_DISPONIBLES TO ADMINISTRADOR;

GRANT INSERT, DROP, SELECT, UPDATE ON RESUM_TICKETS TO ADMINISTRADOR;
GRANT INSERT, DROP, SELECT, UPDATE ON RESUM_ART TO ADMINISTRADOR;
GRANT SELECT ON ARTICULOS_DISPONIBLES TO DEPENDIENTE;










